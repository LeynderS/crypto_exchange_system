@startuml

class UserService{
-final InMemoryUserRepository userRepository
-static final String EMAIL_REGEX
-static final Pattern EMAIL_PATTERN
-User currentUser
+registerUser(String name, String email, String password)
+login(String email, String password)
+logout()
+validateEmail(String email)
+emailInUse(String email)
+getCurrentUser(): User
+isLoggedIn(): boolean
}

class InMemoryUserRepository {
  -Map<String, User> users
  +save(User user)
  +getUserByEmail(String email): User
}

class User {
-String userId
-String name
-String email
-String password
-Wallet wallet
}

class WalletService{
+depositFiat(Wallet wallet, BigDecimal amount)
+withdrawFiat(Wallet wallet, BigDecimal amount)
+depositCrypto(Wallet wallet, CryptoCurrency cryptoCurrency, BigDecimal amount)
+withdrawCrypto(Wallet wallet, CryptoCurrency cryptoCurrency, BigDecimal amount)
+viewBalance(Wallet wallet): String
}

class Wallet {
-BigDecimal fiatBalance
-Map<CryptoCurrency, BigDecimal> cryptoBalances
+depositFiat(BigDecimal amount)
+withdrawFiat(BigDecimal amount)
+depositCrypto(CryptoCurrency cryptoCurrency, BigDecimal amount)
+withdrawCrypto(CryptoCurrency cryptoCurrency, BigDecimal amount)
-fiatFoundsValidation(BigDecimal amount)
-cryptosFoundsValidation(CryptoCurrency cryptoCurrency, BigDecimal amount)
+viewBalance(): String
}

class CryptoCurrencyRepository{
-final Map<String, CryptoCurrency> cryptoCurrencies
getCryptoCurrencyBySymbol(String symbol): CryptoCurrency
}

class SystemExchangeService{
-CryptoCurrencyRepository cryptoCurrencyRepository
-final Map<CryptoCurrency, BigDecimal> cryptosMarketPrice
-final Map<CryptoCurrency, BigDecimal> cryptosAvailability
-PriceObserver observer
-final ScheduledExecutorService priceFluctuationExecutor
+sufficientCryptosInExchange(CryptoCurrency cryptoCurrency, BigDecimal amount)
+getTotalPrice(CryptoCurrency cryptoCurrency, BigDecimal amount): BigDecimal
+buyCryptoCurrency(CryptoCurrency cryptoCurrency, BigDecimal amount)
+getCryptoCurrencyBySymbol(String symbol): CryptoCurrency
+getAvailableCryptosAndMarketPrice(): String
-startPriceFluctuation()
-priceFluctuation()
}

abstract class Order {
-String orderId
-User user
-CryptoCurrency cryptoCurrency
-BigDecimal amount
-LocalDateTime date
}

class BuyOrder {
-BigDecimal maxPrice
}

class SellOrder{
-BigDecimal minPrice
}

class OrderBook{
-TransactionService transactionService
-List<Order> buyOrders
-List<Order> sellOrders
+addOrder(Order order)
+getUserOrders(User user): List<Order>
+cancelUserOrder(User user, String orderIndex)
-matchOrders()
-findMatchingOrders(): Order[]
-ordersMatch(Order buyOrder, Order sellOrder): boolean
-removeMatchedOrders(Order buyOrder, Order sellOrder)
}

class TransactionRepository {
-final Map<User, List<Transaction>> transactions
+save(User user, Transaction transaction)
+getTransactions(User user): List<Transaction>
}

class Transaction {
-String transactionId
-CryptoCurrency cryptoCurrency
-BigDecimal amount
-BigDecimal price
-TransactionType type
-LocalDateTime timestamp
}

class TransactionService {
-final TransactionRepository transactionRepository
-final WalletService walletService
-saveTransaction(User user, CryptoCurrency cryptoCurrency, BigDecimal amount, BigDecimal price, TransactionType type)
+getTransactions(User user): List<Transaction>
~processTransaction(Order buyOrder, Order sellOrder)
}


class CryptoCurrency {
-String symbol
-String name
}

enum TransactionType {
BUY
SELL
}

UserService "1" --> "1" InMemoryUserRepository : Uses
InMemoryUserRepository "1" *-- "0..*" User : Stores
User "1" *-- "1" Wallet : contains
Wallet "1" <-- "1" WalletService : Uses
Wallet "1" o-- "0..*" CryptoCurrency : Contains
CryptoCurrencyRepository "1" --> "1..*" CryptoCurrency : provides
SystemExchangeService "1 "--> "1" CryptoCurrencyRepository : uses
Order <|-- BuyOrder
Order <|-- SellOrder
OrderBook "1" *-- "0..*" Order : contains
OrderBook "1" --> "1" TransactionService : interacts with
TransactionRepository "1" *-- "0..*" Transaction: contains
TransactionService "1" --> "1" TransactionRepository : Uses
Transaction "1" o-- "1" CryptoCurrency
Order "1" --> "1" User : BelongsTo
TransactionRepository "1" --> "0..*" User : manages

@enduml