@startuml

class User {
-String userId
-String name
-String email
-String password
-Wallet wallet
-TransactionService transactionService
+register(String name, String email, String password)
+login(String email, String password)
+logout()
}

class UserRepository {
  -Map<String, User> users
  +save(User user)
  +authenticate(String email, String password): User
}

class Wallet {
-BigDecimal fiatBalance
-Map<CryptoCurrency, BigDecimal> cryptoBalances
+depositFiat(BigDecimal amount)
+withdrawFiat(BigDecimal amount)
+viewBalance()
}

class CryptoCurrency {
-String symbol
-String name
-BigDecimal marketPrice
+updateMarketPrice()
+BigDecimal getMarketPrice()
}

class Transaction {
-String transactionId
-CryptoCurrency cryptoCurrency
-BigDecimal amount
-BigDecimal price
-TransactionType type
-LocalDateTime timestamp
+createTransaction()
+viewTransactionHistory()
}

class TransactionService {
  -List<Transaction> transactions
  +createTransaction()
  +getTransactionHistory(): List<Transaction>
}

abstract class Order {
-String orderId
-CryptoCurrency cryptoCurrency
-BigDecimal amount
-LocalDateTime timestamp
+placeOrder()
+executeOrder()
+cancelOrder()
}

class BuyOrder {
-BigDecimal maxPrice
+placeOrder()
}

class SellOrder{
-BigDecimal minPrice
+placeOrder()
}

class Market{
-List<Order> orderBook
+matchOrders()
+priceFluctuation()
}

class Exchange{
-Map<CryptoCurrency, price> marketPrices
+initializeCryptoCurrencies()
+updateCryptoCurrencies()
}


enum TransactionType {
BUY
SELL
}

User "1" *-- "1" Wallet : contains
User "1" --> "0..*" Order : Places Order
User "1" *--> "1" TransactionService : Uses
UserRepository "1" *-- "0..*" User : Stores
User "1" --> "1" UserRepository : Registers/Logs in
TransactionService "1" *-- "0..*" Transaction
Transaction "1" *-- "1" CryptoCurrency
Order <|-- BuyOrder
Order <|-- SellOrder
Order "1" *--> "1" Transaction
Market "1" o-- "0..*" Order
Exchange "1" o-- "0..*" CryptoCurrency
Wallet "1" *-- "0..*" Transaction : Records

@enduml