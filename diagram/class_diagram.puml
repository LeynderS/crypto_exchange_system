@startuml

class UserService{
-final InMemoryUserRepository userRepository
-static final String EMAIL_REGEX
-static final Pattern EMAIL_PATTERN
-User currentUser
+registerUser(String name, String email, String password)
+login(String email, String password)
+logout()
+validateEmail(String email)
+emailInUse(String email)
+getCurrentUser(): User
+isLoggedIn(): boolean
}

class InMemoryUserRepository {
  -Map<String, User> users
  +save(User user)
  +getUserByEmail(String email): User
}

class User {
-String userId
-String name
-String email
-String password
-Wallet wallet
+getEmail(): String
+getPassword(): String
+getName(): String
}

class WalletService{
-Wallet wallet
+depositFiat(BigDecimal amount)
+withdrawFiat(BigDecimal amount)
+depositCrypto(CryptoCurrency cryptoCurrency, BigDecimal amount)
+withdrawCrypto(CryptoCurrency cryptoCurrency, BigDecimal amount)
+viewBalance(): String
}

class Wallet {
-BigDecimal fiatBalance
-Map<CryptoCurrency, BigDecimal> cryptoBalances
+depositFiat(BigDecimal amount)
+withdrawFiat(BigDecimal amount)
+depositCrypto(CryptoCurrency cryptoCurrency, BigDecimal amount)
+withdrawCrypto(CryptoCurrency cryptoCurrency, BigDecimal amount)
+viewBalance(): String
}

class CryptoCurrencyRepository{
getCryptoCurrencyBySymbol(String symbol): CryptoCurrency
}

class SystemExchangeService{
-CryptoCurrencyRepository cryptoCurrencyRepository
-final Map<CryptoCurrency, BigDecimal> cryptosMarketPrice
-final Map<CryptoCurrency, BigDecimal> cryptosAvailability
+sufficientCryptos(String symbol, (BigDecimal amount)
+getTotalPrice(String symbol, BigDecimal amount): BigDecimal
+buyCryptoCurrency(String symbol, BigDecimal amount): CryptoCurrency
+getAvailableCryptosAndMarketPrice(): BigDecimal
}

abstract class Order {
-String orderId
-User user
-CryptoCurrency cryptoCurrency
-BigDecimal amount
-LocalDateTime date
}

class BuyOrder {
-BigDecimal maxPrice
}

class SellOrder{
-BigDecimal minPrice
}

class OrderBook{
-List<Order> buyOrders
-List<Order> sellOrders
+addOrder(Order order)
+matchOrders()
}


interface TransactionRepository {
void save(Transaction transaction)
List<Transaction> getTransactionHistoryByUser(User user)
}

class InMemoryTransactionRepository {
  -Map<String, List<Transaction>> transactions
}

class Transaction {
-String transactionId
-CryptoCurrency cryptoCurrency
-BigDecimal amount
-BigDecimal price
-TransactionType type
-LocalDateTime timestamp
+createTransaction()
+viewTransactionHistory()
}

class TransactionService {
  -List<Transaction> transactions
  +createTransaction()
  +getTransactionHistory(): List<Transaction>
}


class CryptoCurrency {
-String symbol
-String name
-BigDecimal marketPrice
-BigDecimal exchangeAvailability
+updateMarketPrice()
+updateExchangeAvailability()
}

class SystemExchangeService{
-Map<String, CryptoCurrency> cryptosExchange
+updateCryptoCurrencies()
}


enum TransactionType {
BUY
SELL
}

UserService "1" --> "1" InMemoryUserRepository : Uses
InMemoryUserRepository "1" *-- "0..*" User : Stores
User "1" *-- "1" Wallet : contains
Wallet "1" <-- "1" WalletService : Uses
CryptoCurrencyRepository --> CryptoCurrency : provides
SystemExchangeService --> CryptoCurrencyRepository : uses
Order <|-- BuyOrder
Order <|-- SellOrder
OrderBook "1" *-- "0..*" Order : contains

TransactionRepository <|-- InMemoryTransactionRepository

TransactionService "1" *-- "0..*" Transaction
Transaction "1" *-- "1" CryptoCurrency


@enduml